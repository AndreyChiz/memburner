

services:
  postgres:
    container_name: memburner_database
    image: postgres:16-alpine3.19
    env_file:
      - path: .env
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    environment:
      POSTGRES_DB: "${APP_CONFIG__DATABASE__NAME}"
      POSTGRES_USER: "${APP_CONFIG__DATABASE__USER}"
      POSTGRES_PASSWORD: "${APP_CONFIG__DATABASE__PASSWORD}"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ./db-docker-volume:/var/lib/postgresql/data
    ports:
      - "${APP_CONFIG__DATABASE__PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${APP_CONFIG__DATABASE__USER} -d ${APP_CONFIG__DATABASE__NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    networks:
      - memoburner_docker_networks

  additional_service:
    container_name: memburner_api
    image: "python:3.12.7-alpine3.20" 
    env_file:
      - path: .env 
    #command: sh -c "mkdir -p /application && sh"  # Создаем папку и удерживаем контейнер активным
    command: |
              sh -c "mkdir -p /application && 
              echo 'Setting up application...' && 
              cd application &&
              python3 -m venv .venv &&
              . .venv/bin/activate &&
              pip install update pip &&
              pip install --upgrade pip &&
              pip install poetry &&
              poetry install
              echo 'environment build, is ok, continue breathing' &&

              python3 main.py"
            # && sleep infinity &&
            # echo 'не сработало'"
    volumes:
      - ./application:/application  
    ports:
      - "8008:${APP_CONFIG__RUN__PORT}"
    networks:
      - memoburner_docker_networks
    restart: unless-stopped

networks:
  memoburner_docker_networks:
    driver: bridge
